<?php
//declare(strict_types=1);
namespace App\Model;

//Объявить класс как final, чтобы его нельзя было переопределить при добавлении методов, изменяющих внутреннее состояние.
class Project
{
    /**
     * @var array // массив чего? string[] OR int[]
     *
     * не очем не говорит не следуем стандарту ПСР-2 -12
     * Если у нас модель мы должны описать свойства private $id и т.д что бы не создаватьь
     * любой ключ с либым типом нужна конкретика
     *
     */
    public $_data;

    // type hint?
    // как описал выше если есть семантика и объявленные свойства
    // то использовать конструктор для задания параметров
    public function __construct($data)
    {
        $this->_data = $data;
    }

    /**
     * @return int
     */

    // указать возов типа возвращаемого значения - int
    public function getId()
    {
        // А если ключа не будет ID
        // fatal - 500
        // а если ID = null то при привидении к типу получим 0
        return (int) $this->_data['id'];
    }

    /**
     * @return string
     */

    /// Ненужный метод если у нас есть уже есть семантика класса
    public function toJson()
    {
        //Тут есть возможность получить неверную json-строку, которая может вызвать синтаксическую ошибку
        // Желательно использовать проверку с функцией  json_last_error() так мы имеем дело с версией php7.2
        // то мы не можем использовать флаг JSON_THROW_ON_ERROR.
        //if ( json_last_error() ) {} и далее проверяем какие могут быть ошибки
        return json_encode($this->_data);
    }
}
